#if 0
#include <windows.h>
#include <GL\glew.h>
#include <GL\freeglut.h>
#include <iostream>
#include<math.h>
#include <stdio.h>
#define pi 3.142857

using namespace std;

void changeViewPort(int w, int h)
{
	glViewport(0, 0, w, h);
}

void render()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glutSwapBuffers();
}

void myInit(void)
{
	glClearColor(0, 0, 0, 1);
	glColor3f(1, 1, 0);

	glPointSize(2.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluOrtho2D(-780, 780, -420, 420);
}

void drawCircle(float x0, float y0, float r)
{
	glClear(GL_COLOR_BUFFER_BIT);
	float p, x, y;
	x = 0; y = r;

	p = 1 - r;
	float ang;
	glBegin(GL_POINTS);
	glColor3f(1, 1, 0);
	glVertex2f(x0 + x, y0 + y);
	glVertex2f(x0 + x, y0 - y);
	glVertex2f(x0 - x, y0 + y);
	glVertex2f(x0 - x, y0 - y);
	glVertex2f(x0 + y, y0 + x);
	glVertex2f(x0 + y, y0 - x);
	glVertex2f(x0 - y, y0 + x);
	glVertex2f(x0 - y, y0 - x);

	while (x <= y)
		if (p<0)
		{
			x++;
			glVertex2f(x0 + x, y0 + y);
			glVertex2f(x0 + x, y0 - y);
			glVertex2f(x0 - x, y0 + y);
			glVertex2f(x0 - x, y0 - y);
			glVertex2f(x0 + y, y0 + x);
			glVertex2f(x0 + y, y0 - x);
			glVertex2f(x0 - y, y0 + x);
			glVertex2f(x0 - y, y0 - x);
			p += 2 * x + 3;
		}

		else
		{
			x++; y--;
			glColor3f(0, 1, 0);
			glVertex2f(x0 + x, y0 + y);
			glVertex2f(x0 + x, y0 - y);
			glVertex2f(x0 - x, y0 + y);
			glVertex2f(x0 - x, y0 - y);
			glVertex2f(x0 + y, y0 + x);
			glVertex2f(x0 + y, y0 - x);
			glVertex2f(x0 - y, y0 + x);
			glVertex2f(x0 - y, y0 - x);
			p += 2 * x - 2 * y + 5;
		}

	for (int i = -500; i <= 500; i++)
	{
		glColor3f(1, 0, 1);
		glVertex2f(i, 0);
		glVertex2f(0, i);
	}

	glEnd();
	glFlush();
}

void draw()
{
	glColor3f(1, 1, 0);
	int count = 0;
	float tx = 10, ty = 10, th = pi / 4;
	float pl[202][2], cr[202][2];
	for (int i = 0; i <= 100; i++)
	{
		pl[i][0] = i - 50;
		pl[i][1] = 50;
		pl[i + 101][0] = 0;
		pl[i + 101][1] = i;
	}
	float cx, cy;
	cx = 0; cy = 50;
	while (1)
	{
		drawCircle(cx, cy, 50);
		for (int i = 0; i <= 100; i++)
		{
			cr[i][0] = cx + (((pl[i][0] - cx)*cos(th)) - ((pl[i][1] - cy)*sin(th)));
			cr[i][1] = cy + (((pl[i][0] - cx)*sin(th)) + ((pl[i][1] - cy)*cos(th)));
			cr[i + 101][0] = cx + (((pl[i + 101][0] - cx)*cos(th)) - ((pl[i + 101][1] - cy)*sin(th)));
			cr[i + 101][1] = cy + (((pl[i + 101][0] - cx)*sin(th)) + ((pl[i + 101][1] - cy)*cos(th)));
		}
		if (count % 2 == 0)
		{
			glBegin(GL_POINTS);
			glColor3f(1, 0, 0);
			for (int i = 0; i <= 100; i++)
			{
				glVertex2f(pl[i][0], pl[i][1]);
				glVertex2f(pl[i + 101][0], pl[i + 101][1]);
			}


			glEnd(); glFlush();

		}
		else
		{
			glBegin(GL_POINTS);
			glColor3f(1, 0, 0);
			for (int i = 0; i <= 201; i++)
				glVertex2f(cr[i][0], cr[i][1]);
			glEnd(); glFlush();
		}
		if (cx <= 400)
		{
			cx += tx; cy += ty;
		}
		else break;

		for (int i = 0; i <= 100; i++)
		{
			pl[i][0] += tx;
			pl[i][1] += ty;
			pl[i + 101][0] += tx;
			pl[i + 101][1] += ty;
		}

		count++;
		Sleep(500);
	}



}
int main(int argc, char* argv[]) {

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1500, 800);
	glutCreateWindow("Wheel rotation plus translation");
	myInit();
	glutDisplayFunc(draw);
	
	glutMainLoop();
	return 0;
}
#endif
